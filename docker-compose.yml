version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: collaborative-docs-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: collaborative_docs
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: collaborative-docs-backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=collaborative_docs
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/collaborative_docs?schema=public
      - JWT_SECRET_KEY=your_secure_jwt_secret_key
      - JWT_REFRESH_SECRET_KEY=your_secure_jwt_refresh_secret_key
      - UPLOAD_DIR=src/uploads
    ports:
      - "3000:3000"
    volumes:
      - ./backend/src/uploads:/app/src/uploads
    networks:
      - app-network


  # Frontend Angular Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: collaborative-docs-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
