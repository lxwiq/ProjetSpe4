{
  "info": {
    "name": "Backend API",
    "description": "Collection de requêtes pour tester les fonctionnalités de l'API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentification",
      "item": [
        {
          "name": "Login Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin_password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Connexion avec un compte administrateur pour obtenir un token JWT"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 200 OK",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Vérifier que la réponse contient un token",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    ",
                  "    // Stocker le token pour les autres requêtes",
                  "    if (jsonData.data && jsonData.data.token) {",
                  "        pm.environment.set(\"adminToken\", jsonData.data.token);",
                  "        console.log(\"Token d'administrateur enregistré dans la variable d'environnement\");",
                  "    }",
                  "});",
                  "",
                  "// Vérifier que l'utilisateur est un administrateur",
                  "pm.test(\"User is admin\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user).to.have.property('is_admin');",
                  "    pm.expect(jsonData.data.user.is_admin).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"user_password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Connexion avec un compte utilisateur standard pour obtenir un token JWT"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 200 OK",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Vérifier que la réponse contient un token",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    ",
                  "    // Stocker le token pour les autres requêtes",
                  "    if (jsonData.data && jsonData.data.token) {",
                  "        pm.environment.set(\"userToken\", jsonData.data.token);",
                  "        console.log(\"Token d'utilisateur enregistré dans la variable d'environnement\");",
                  "    }",
                  "});",
                  "",
                  "// Vérifier que l'utilisateur n'est pas un administrateur",
                  "pm.test(\"User is not admin\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user).to.have.property('is_admin');",
                  "    pm.expect(jsonData.data.user.is_admin).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Gestion des documents",
      "item": [
        {
          "name": "Récupérer tous les documents",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["documents"]
            },
            "description": "Récupère tous les documents de l'utilisateur connecté"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 200 OK",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Vérifier que la réponse est un tableau",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Ajouter un document",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Document de test\",\n    \"content\": \"Contenu du document de test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/documents/add",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "add"]
            },
            "description": "Ajoute un nouveau document pour l'utilisateur connecté"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 201 Created",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Vérifier que la réponse contient les données du document",
                  "pm.test(\"Response has document data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('content');",
                  "    pm.expect(jsonData).to.have.property('owner_id');",
                  "    ",
                  "    // Stocker l'ID du document pour les tests suivants",
                  "    if (jsonData && jsonData.id) {",
                  "        pm.environment.set(\"testDocumentId\", jsonData.id);",
                  "        console.log(\"ID du document test enregistré: \" + jsonData.id);",
                  "    }",
                  "});",
                  "",
                  "// Vérifier que le titre et le contenu correspondent à ce qui a été envoyé",
                  "pm.test(\"Document title and content match\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.equal(\"Document de test\");",
                  "    pm.expect(jsonData.content).to.equal(\"Contenu du document de test\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Supprimer un document",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/documents/{{testDocumentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "{{testDocumentId}}"]
            },
            "description": "Supprime un document de l'utilisateur connecté"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 200 OK",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Vérifier que le message de confirmation contient l'ID du document",
                  "pm.test(\"Response contains document ID\", function () {",
                  "    var responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include(pm.environment.get(\"testDocumentId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Supprimer un document inexistant",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/documents/999999",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "999999"]
            },
            "description": "Tente de supprimer un document qui n'existe pas"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 403 Forbidden",
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Vérifier que le message d'erreur est correct",
                  "pm.test(\"Error message is correct\", function () {",
                  "    var responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include(\"Document not found or you do not have permission\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Ajouter un document sans titre",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"Contenu sans titre\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/documents/add",
              "host": ["{{baseUrl}}"],
              "path": ["documents", "add"]
            },
            "description": "Tente d'ajouter un document sans titre"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 500 ou 400",
                  "pm.test(\"Status code is error\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Admin - Gestion des utilisateurs",
      "item": [
        {
          "name": "Récupérer tous les utilisateurs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Récupère la liste de tous les utilisateurs (admin uniquement)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 200 OK",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Vérifier que la réponse contient des données",
                  "pm.test(\"Response has data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "// Vérifier que les données sensibles ne sont pas retournées",
                  "pm.test(\"Sensitive data is not returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.length > 0) {",
                  "        pm.expect(jsonData.data[0]).to.not.have.property('password_hash');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Créer un utilisateur",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"test_user\",\n    \"email\": \"test@example.com\",\n    \"password\": \"securePassword123\",\n    \"full_name\": \"Test User\",\n    \"is_admin\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Crée un nouvel utilisateur (admin uniquement)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 201 Created",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Vérifier que la réponse contient les données de l'utilisateur",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('username');",
                  "    pm.expect(jsonData.data).to.have.property('email');",
                  "});",
                  "",
                  "// Vérifier que le mot de passe n'est pas retourné",
                  "pm.test(\"Password is not returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.not.have.property('password_hash');",
                  "});",
                  "",
                  "// Stocker l'ID de l'utilisateur pour les tests suivants",
                  "if (pm.response.json().data && pm.response.json().data.id) {",
                  "    pm.environment.set(\"testUserId\", pm.response.json().data.id);",
                  "    console.log(\"ID de l'utilisateur test enregistré: \" + pm.response.json().data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Désactiver un compte utilisateur",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{testUserId}}/deactivate",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{testUserId}}", "deactivate"]
            },
            "description": "Désactive un compte utilisateur (admin uniquement)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 200 OK",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Vérifier que l'utilisateur est désactivé",
                  "pm.test(\"User is deactivated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('is_active');",
                  "    pm.expect(jsonData.data.is_active).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Réactiver un compte utilisateur",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{testUserId}}/activate",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{testUserId}}", "activate"]
            },
            "description": "Réactive un compte utilisateur (admin uniquement)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 200 OK",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Vérifier que l'utilisateur est activé",
                  "pm.test(\"User is activated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('is_active');",
                  "    pm.expect(jsonData.data.is_active).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Tests de sécurité",
      "item": [
        {
          "name": "Accès refusé - Utilisateur non admin",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Tente d'accéder à une route admin avec un token d'utilisateur standard"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 403 Forbidden",
                  "pm.test(\"Status code is 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "// Vérifier que le message d'erreur est correct",
                  "pm.test(\"Error message is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('refus');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Accès refusé - Sans token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Tente d'accéder à une route admin sans token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 401 Unauthorized",
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Accès refusé - Token invalide",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"]
            },
            "description": "Tente d'accéder à une route admin avec un token invalide"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Vérifier que le statut est 401 Unauthorized",
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testDocumentId",
      "value": "",
      "type": "string"
    }
  ]
}
