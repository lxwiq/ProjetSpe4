generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model call_participants {
  id        Int       @id @default(autoincrement())
  call_id   Int
  user_id   Int
  joined_at DateTime? @default(now()) @db.Timestamptz(6)
  left_at   DateTime? @db.Timestamptz(6)
  is_active Boolean?  @default(true)
  calls     calls     @relation(fields: [call_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([call_id, user_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model calls {
  id                Int                 @id @default(autoincrement())
  document_id       Int
  initiated_by      Int
  started_at        DateTime?           @default(now()) @db.Timestamptz(6)
  ended_at          DateTime?           @db.Timestamptz(6)
  call_type         String              @db.VarChar(20)
  status            String?             @default("active") @db.VarChar(20)
  call_participants call_participants[]
  documents         documents           @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users               @relation(fields: [initiated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([document_id], map: "idx_calls_document")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model document_invitations {
  id                                           Int       @id @default(autoincrement())
  document_id                                  Int
  user_id                                      Int
  permission_level                             String    @db.VarChar(20)
  invited_by                                   Int?
  invitation_date                              DateTime? @default(now()) @db.Timestamptz(6)
  accepted_date                                DateTime? @db.Timestamptz(6)
  is_active                                    Boolean?  @default(true)
  documents                                    documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_document_invitations_invited_byTousers users?    @relation("document_invitations_invited_byTousers", fields: [invited_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_document_invitations_user_idTousers    users     @relation("document_invitations_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([document_id, user_id])
  @@index([document_id], map: "idx_document_invitations_document")
  @@index([user_id], map: "idx_document_invitations_user")
}

model document_versions {
  id                Int       @id @default(autoincrement())
  document_id       Int
  version_number    Int
  content           String?
  modified_by       Int
  modification_date DateTime? @default(now()) @db.Timestamptz(6)
  change_summary    String?
  documents         documents @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users     @relation(fields: [modified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([document_id, version_number])
  @@index([document_id], map: "idx_document_versions_document")
}

model documents {
  id                                      Int                    @id @default(autoincrement())
  title                                   String                 @db.VarChar(255)
  content                                 String?
  file_path                               String?                @db.VarChar(500)
  file_type                               String?                @db.VarChar(50)
  file_size                               BigInt?
  owner_id                                Int
  parent_folder_id                        Int?
  is_folder                               Boolean?               @default(false)
  is_deleted                              Boolean?               @default(false)
  created_at                              DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at                              DateTime?              @default(now()) @db.Timestamptz(6)
  last_modified_by                        Int?
  auto_save_interval                      Int?                   @default(30)
  calls                                   calls[]
  document_invitations                    document_invitations[]
  document_versions                       document_versions[]
  users_documents_last_modified_byTousers users?                 @relation("documents_last_modified_byTousers", fields: [last_modified_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_documents_owner_idTousers         users                  @relation("documents_owner_idTousers", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  documents                               documents?             @relation("documentsTodocuments", fields: [parent_folder_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_documents                         documents[]            @relation("documentsTodocuments")

  @@index([owner_id], map: "idx_documents_owner")
  @@index([parent_folder_id], map: "idx_documents_parent")
}

model users {
  id                                                          Int                    @id @default(autoincrement())
  username                                                    String                 @unique @db.VarChar(50)
  email                                                       String                 @unique @db.VarChar(100)
  password_hash                                               String                 @db.VarChar(255)
  full_name                                                   String?                @db.VarChar(100)
  profile_picture                                             String?                @db.VarChar(255)
  two_factor_enabled                                          Boolean?               @default(false)
  two_factor_secret                                           String?                @db.VarChar(255)
  is_admin                                                    Boolean?               @default(false)
  is_active                                                   Boolean?               @default(true)
  created_at                                                  DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at                                                  DateTime?              @default(now()) @db.Timestamptz(6)
  last_login                                                  DateTime?              @db.Timestamptz(6)
  login_attempts                                              Int?                   @default(0)
  locked_until                                                DateTime?              @db.Timestamptz(6)
  call_participants                                           call_participants[]
  calls                                                       calls[]
  document_invitations_document_invitations_invited_byTousers document_invitations[] @relation("document_invitations_invited_byTousers")
  document_invitations_document_invitations_user_idTousers    document_invitations[] @relation("document_invitations_user_idTousers")
  document_versions                                           document_versions[]
  documents_documents_last_modified_byTousers                 documents[]            @relation("documents_last_modified_byTousers")
  documents_documents_owner_idTousers                         documents[]            @relation("documents_owner_idTousers")

  @@index([email], map: "idx_users_email")
}
